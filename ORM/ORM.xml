<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ORM</name>
    </assembly>
    <members>
        <member name="T:ORM.ExpressionTreeVisitor">
            <summary>
            Used to dissect LINQ expressions
            </summary>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Generic expression visiter method
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Used to visit a Binding
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Used to visit an element initializer
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            used to visit a unary expression
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            used to visit a binary expression
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Used to visit a type binary expression
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Used to visit a constant expression
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Used to visit a conditional expression
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Used to visit a parameter expression
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Used to visit a member access expression
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Used to visit a method call expression
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Used to visit a list of expressions
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Used to visit a member assignment
            </summary>
            <param name="assignment"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Used to visit a member member binding
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Used to visit a member list binding
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Used to visit a binding list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Used to visit an element initializer list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitParameterList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Used to visit a parameter list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Used to visit a lambda expression
            </summary>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Used to visit a new expression
            </summary>
            <param name="newExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Used to visit a member init expression
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Used to visit a list init expression
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Used to visit a new array expression
            </summary>
            <param name="na"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.ExpressionTreeVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Use to visit an invocation expression
            </summary>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="T:ORM.MyOrm">
            <summary>
            The actual class used as an ORM
            </summary>
        </member>
        <member name="M:ORM.MyOrm.#ctor(DatabaseDriver.Interfaces.IDatabaseDriver,SqlStatementBuilder.Interfaces.ISqlStatementBuilder,ChangerTracking.Interfaces.IChangeTracker)">
            <inheritdoc />
        </member>
        <member name="M:ORM.MyOrm.GetQuery``1">
            <summary>
            Returns a queryable that enumerates to a collection with database objects
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM.MyOrm.Insert(System.Object)">
            <summary>
            Used to add objects to the ORM
            </summary>
            <param name="objectToInsert"></param>
        </member>
        <member name="M:ORM.MyOrm.Delete(System.Object)">
            <summary>
            Used to delete objects from the ORM
            </summary>
            <param name="objectToDelete"></param>
        </member>
        <member name="M:ORM.MyOrm.GetObjectsFromDb``1(SqlStatementBuilder.Interfaces.ISqlStatementBuilder)">
            <summary>
            Used by the query provider to materialize database objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:ORM.MyOrm.SubmitChanges">
            <summary>
            Writes changes to the database
            </summary>
        </member>
        <member name="P:ORM.MyOrm.ChangeTracker">
            <summary>
            Tracks changes of objects known to the ORM
            </summary>
        </member>
        <member name="T:ORM.QueryableObject`1">
            <summary>
            Provides a query to use with select statements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM.QueryableObject`1.#ctor(ORM.MyOrm)">
            <inheritdoc />
        </member>
        <member name="P:ORM.QueryableObject`1.ElementType">
            <inheritdoc />
        </member>
        <member name="P:ORM.QueryableObject`1.Expression">
            <inheritdoc />
        </member>
        <member name="P:ORM.QueryableObject`1.Provider">
            <inheritdoc />
        </member>
        <member name="M:ORM.QueryableObject`1.GetEnumerator">
            <inheritdoc />
        </member>
    </members>
</doc>
